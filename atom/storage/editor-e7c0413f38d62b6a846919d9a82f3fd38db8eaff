{"version":1,"windowDimensions":{"x":0,"y":0,"width":1920,"height":1080,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/alholt/code/mcdn-portal"],"buffers":[{"id":"b28def0a2c3fa3b2694ad64b91c9304d","text":"require_relative 'common'\n\nclass CustomersControllerTest < ActionController::TestCase\n  # No side effects\n  test 'valid params update successfully' do\n    with_customer do |customer_id|\n      expect_customer_updated\n      valid_update_post(customer_id)\n    end\n  end\n\n  test 'update for customer with insufficient perms fails' do\n    with_customer do |customer_id|\n      expect_insufficient_perms\n      expect_customer_not_updated\n      valid_update_post(customer_id)\n    end\n  end\n\n  test 'invalid customer fails' do\n    expect_customer_not_updated\n    Customer.any_instance.stubs(:valid?).returns(false)\n    patch :update, valid_customer_params(INVALID_CUSTOMER_ID)\n  end\n\n  test 'update creates confirmation when side effects exist' do\n    # Customer will not be updated yet, just a confirmation\n    with_customer do |customer_id|\n      expect_customer_not_updated\n      Customer.stubs(:check_enable).returns(true)\n      Customer.any_instance.stubs(:able_with_side_effects)\n                           .returns([{ action: 'action' }])\n      valid_update_post(customer_id)\n    end\n  end\n\n  test 'admin customer is enabled when given' do\n    valid_update_post(ADMIN_CUSTOMER_ID)\n    assert_equal assigns(:p)[:enabled], '1'\n  end\n\n  # With side effects\n  test 'valid params with confirmation update successfully' do\n    with_customer do |customer_id|\n      expect_customer_updated\n      with_valid_confirmation(@user.id, customer_id)\n      valid_update_post_with_confirmation(customer_id)\n    end\n  end\n\n  test 'fails if invalid confirmation provided' do\n    with_customer do |customer_id|\n      expect_customer_not_updated\n      with_invalid_confirmation\n      valid_update_post_with_confirmation(customer_id)\n      assert_match 'Illegal request.', flash[:error]\n    end\n  end\n\n  test 'fails if action cancelled' do\n    with_customer do |customer_id|\n      expect_customer_not_updated\n      with_valid_confirmation(@user.id, customer_id)\n      valid_update_post_with_confirmation(customer_id, cancels: true)\n      assert_match 'Action cancelled.', flash[:success]\n    end\n  end\n\n  private\n\n  def valid_update_post(customer_id)\n    patch :update, valid_customer_params(customer_id)\n    assert_response :redirect\n  end\n\n  def valid_update_post_with_confirmation(customer_id, cancels: false)\n    patch :confirm_update, valid_customer_params(customer_id, cancel: cancels)\n    assert_response :redirect\n  end\nend\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"39":{"range":{"start":{"row":0,"column":0},"end":{"row":81,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":20,"column":24},"end":{"row":20,"column":24}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":115,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/test/controllers/customers_controller/update_test.rb","digestWhenLastPersisted":"536a8553401bfa006421a7de5cddb43d0ec36840","preferredLineEnding":"\n","nextMarkerId":44,"deserializer":"TextBuffer","version":5},{"id":"ab07460427a3b83204ce4f95dd099612","text":"require_relative 'common'\n\nclass CpcodesControllerTest < ActionController::TestCase\n  # No side effects\n  test 'valid params update successfully' do\n    cpcode_updated do |cpcode_id|\n      valid_update_post(@user.id, cpcode_id)\n    end\n  end\n\n  test 'update for customer with insufficient perms fails' do\n    cpcode_not_updated do |cpcode_id|\n      Cpcode.any_instance.stubs(:perms).returns({ edit: false })\n      valid_update_post(@user.id, cpcode_id)\n    end\n  end\n\n  test 'invalid cpcode fails' do\n    cpcode_not_updated do |cpcode_id|\n      Cpcode.any_instance.stubs(:valid?).returns(false)\n      patch :update, valid_cpcode_params(cpcode_id, @user.id) # not testing redirect\n    end\n  end\n\n  test 'update creates confirmation when side effects exist' do\n    # Cpcode will not be updated yet, just a confirmation\n    cpcode_not_updated do |cpcode_id|\n      Cpcode.stubs(:check_enable).returns(true)\n      Cpcode.any_instance.stubs(:able_with_side_effects)\n                         .returns([{ action: 'action' }])\n      valid_update_post(@user.id, cpcode_id)\n    end\n  end\n\n  # With side effects\n  test 'valid params with confirmation update successfully' do\n    cpcode_updated do |cpcode_id|\n      with_valid_confirmation(@user.id, cpcode_id)\n      valid_update_post(@user.id, cpcode_id)\n    end\n  end\n\n  test 'fails if invalid confirmation provided' do\n    cpcode_not_updated do |cpcode_id|\n      with_invalid_confirmation\n      valid_update_post_with_confirmation(@user.id, cpcode_id)\n      assert_equal 'Illegal request.', flash[:error]\n    end\n  end\n\n  test 'fails if action cancelled' do\n    cpcode_not_updated do |cpcode_id|\n      with_valid_confirmation(@user.id, cpcode_id)\n      valid_update_post_with_confirmation(@user.id, cpcode_id, cancels: true)\n      assert_equal 'Action cancelled.', flash[:success]\n    end\n  end\n\n  private\n\n  def valid_update_post(user_id, cpcode_id)\n    patch :update, valid_cpcode_params(cpcode_id, user_id)\n    assert_response :redirect\n  end\n\n  def valid_update_post_with_confirmation(user_id, cpcode_id, cancels: false)\n    post :confirm_update, valid_cpcode_params(cpcode_id, user_id, cancel: cancels)\n    assert_response :redirect\n  end\nend\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"2":{"range":{"start":{"row":71,"column":0},"end":{"row":71,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":59,"column":0},"end":{"row":59,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":4,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/test/controllers/cpcodes_controller/update_test.rb","digestWhenLastPersisted":"aa5de1d3666ba9a623cff3317b83e8647a584703","preferredLineEnding":null,"nextMarkerId":10,"deserializer":"TextBuffer","version":5},{"id":"4dff72367922114b4b93ee2400f3f40b","text":"class CustomersController < ApplicationController\n  include PasswordResetsLib, SendmailLib\n\n  @access = {\n    'index' => [Role::CustomerCare, Role::FirstTierSupport],\n    'show' => [Role::CustomerCare, Role::FirstTierSupport],\n    'default' => [Role::CustomerCare]\n  }\n\n  skip_before_action :check_password_expire, :check_access, :generate_navigation, only: 'roles'\n\n  before_action :load_customer, only: [:show, :edit, :update, :enable, :disable]\n  before_action :customer_params, only: [:create, :update]\n\n  def index\n    @customers = Customer.includes(:cpcodes, :users).all\n    @can_act = {\n      'new_customer' => check_access?('customers', 'new')\n    }\n\n    respond_to do |format|\n      format.html\n      format.json { render json: @customers }\n    end\n  end\n\n  def show\n    if @customer.has_feature? Feature::SecurityMonitor\n      @analyzer_id = @customer.analyzer.present? ? @customer.analyzer.id : 'Not provisioned'\n    end\n    respond_to do |format|\n      format.html\n      format.json { render json: @customer }\n    end\n  end\n\n  def new\n    @customer = Customer.new({ admin: User.new })\n\n    respond_to do |format|\n      format.html { render 'edit' }\n      format.json { render json: @customer }\n    end\n  end\n\n  def edit\n  end\n\n  def create\n    known_error = false\n    logdata_cust = {\n      'action' => Applog::Action::Customer_Create,\n      'success' => true\n    }\n    logdata_admin = {\n      'action' => Applog::Action::User_Create,\n      'success' => true\n    }\n\n    # We use this transaction like a begin/rescue block; by raising\n    # ActiveRecord::Rollback from within it, we can prevent the database from\n    # committing any changes *and* get flow control at the same time.\n    ActiveRecord::Base.transaction do\n      # Temporarily remove join table entries from the parameters hash so the\n      # call to #new doesn't automatically perform a database operation that\n      # is then duplicated by #save (see MCDNPORTAL-169)\n      new_feature_ids = @p.delete(:feature_ids)\n\n      # Attempt to create the customer and the new administrator. If it\n      # fails, rollback the transaction.\n      @customer = Customer.new @p\n      @customer.admin = User.new @q\n      unless @customer.save\n        known_error = true\n        logdata_cust['data'] = { 'errors' => @customer.errors }\n        fail ActiveRecord::Rollback\n      end\n      logdata_cust['target'] = @customer.id\n      logdata_admin['data'] = { 'message' => \"Admin for customer ID #{@customer.id}\" }\n      logdata_admin['target'] = @customer.admin_id\n\n      # This update, because it touches a join table, auto-saves. That's okay\n      # even if we have to rollback later.\n      @customer.feature_ids = new_feature_ids\n\n      # Update the customer admin account with the customer ID.\n      @customer.admin.customer_id = @customer.id\n      @customer.admin.save\n      logdata_admin['target'] = @customer.admin.id\n\n      # Send password-reset email to new administrator. If errors occur, write\n      # a useful (hah) message and rollback the transaction.\n      resetreq = reset_request @customer.admin\n      if resetreq[0] then\n        message_data = {\n          'token' => resetreq[1],\n          'exptime' => (Time.now.utc + 48.hours).to_s\n        }\n        if sendmail(@customer.admin, 'email-pwdreset.erb', message_data)\n          nil\n        else\n          known_error = 'There was an error (17) while sending email. Please contact GCDS Support.'\n          logdata_cust['data'] = { 'errors' => 'sendmail error' }\n          fail ActiveRecord::Rollback\n        end\n      else\n        known_error = 'There was an error (43) while sending email. Please contact GCDS Support.'\n        logdata_cust['data'] = { 'errors' => 'reset request error' }\n        fail ActiveRecord::Rollback\n      end\n    end\n\n    if known_error\n      # If the transaction was rolled back, display errors, log, and redirect appropriately.\n      flash[:error] = known_error if known_error.is_a? String\n      logdata_cust['success'] = false\n      log_error logdata_cust\n      respond_to do |format|\n        format.html { render 'edit' }\n        format.json { render json: @customer.errors, status: :unprocessable_entity }\n      end\n    else\n      # If we get this far, everything worked.\n      flash[:success] = \"Created customer '#{@customer.name}'.\\nCreated customer administrator '#{@customer.admin.name}'.\\nPassword reset email sent to customer administrator.\"\n      log_info logdata_cust\n      log_info logdata_admin\n      respond_to do |format|\n        format.html { redirect_to @customer }\n        format.json { render json: @customer, status: :ok }\n      end\n    end\n  end\n\n  def update\n    @redirect_target = customer_path(@customer)\n    # Permission check.\n    # This is redundant at the moment, because only CCare has access to UPDATE, and\n    # CCare has EDIT perms for all customers (including system customers). But if\n    # that ever changes, this will be more useful.\n    perms = @customer.perms(@thisuser, @parentuser)\n    if !perms['edit'] then\n      flash[:error] = 'You do not have permission to edit that customer.'\n      log_error ({\n        'action' => Applog::Customer_Update,\n        'target' => @customer.id,\n        'success' => false,\n        'data' => { 'message' => 'Permission denied' }\n      })\n      redirect_to @redirect_target\n      return\n    end\n\n    if is_admin_customer(@customer.id) then\n      @p[:enabled] = (@customer.enabled ? '1' : '0')\n    end\n\n    feat_diff = @customer.feature_ids - @p[:feature_ids].map(&:to_i)\n    effects = @customer.remove_features_side_effects(feat_diff, false)\n\n    en = Customer::check_enable(@customer.enabled, @p[:enabled])\n    effects += @customer.able_with_side_effects(en, false)\n\n    effects.reject! do |eff|\n      %w(enable_customer disable_customer).include?(eff[:action])\n    end\n\n    # Prevent updating the short name which would then\n    # change the UCDS pac URL\n    @p[:short_name] = @customer.short_name unless @customer.short_name.empty?\n\n    if effects.any?\n      c = Confirmation.create({\n        user_id:    @thisuser.id,\n        target_id:  @customer.id,\n        title:      'Update Customer',\n        controller: 'customers',\n        action:     'confirm_update',\n        params:     { able: nil, params: @p },\n        operations: effects,\n        referer:    @redirect_target\n      })\n      redirect_to c\n    else\n      update_object\n    end\n  end\n\n  def enable\n    h_log = {\n      action:  Applog::Customer_Enable,\n      target:  @customer.id,\n      success: false\n    }\n    @redirect_target = request.referer ? request.referer : customer_path(@customer)\n\n    # Permission check: no one can ABLE system customers.\n    perms = @customer.perms(@thisuser, @parentuser)\n    if !perms['able'] then\n      flash[:error] = 'You do not have permission to enable that customer.'\n      h_log[:data] = { message: 'Permission denied' }\n      log_error h_log\n      redirect_to @redirect_target\n      return\n    end\n\n    if @customer.enabled\n      flash[:error] = 'That customer is already enabled.'\n      h_log[:data] = { message: 'Customer already enabled' }\n      log_error h_log\n      redirect_to @redirect_target\n      return\n    end\n\n    effects = @customer.enable_with_side_effects(false)\n    effects = effects.reject { |eff| eff[:action] == 'enable_customer' }\n\n    if effects.any?\n      c = Confirmation.create({\n        user_id:    @thisuser.id,\n        target_id:  @customer.id,\n        title:      'Enable Customer',\n        controller: 'customers',\n        action:     'confirm_update',\n        params:     { able: true },\n        operations: effects,\n        referer:    @redirect_target\n      })\n      redirect_to c\n    else\n      able true\n    end\n  end\n\n  def disable\n    h_log = {\n      action:  Applog::Customer_Disable,\n      target:  @customer.id,\n      success: false\n    }\n    @redirect_target = request.referer ? request.referer : customer_path(@customer)\n\n    perms = @customer.perms(@thisuser, @parentuser)\n    if !perms['able'] then\n      flash[:error] = 'You do not have permission to disable that customer.'\n      h_log[:data] = { message: 'Permission denied' }\n      log_error h_log\n      redirect_to @redirect_target\n      return\n    end\n\n    if ! @customer.enabled\n      flash[:error] = 'That customer is already disabled.'\n      h_log[:data] = { message: 'Customer already disabled' }\n      log_error h_log\n      redirect_to @redirect_target\n      return\n    end\n\n    effects = @customer.disable_with_side_effects(false)\n    effects = effects.reject { |eff| eff[:action] == 'disable_customer' }\n\n    if effects.any?\n      c = Confirmation.create({\n        user_id:    @thisuser.id,\n        target_id:  @customer.id,\n        title:      'Disable Customer',\n        controller: 'customers',\n        action:     'confirm_update',\n        params:     { able: false },\n        operations: effects,\n        referer:    @redirect_target\n      })\n      redirect_to c\n    else\n      able false\n    end\n  end\n\n  def confirm_update\n    conf = Confirmation.find_by id: params[:conf_id]\n    conf = nil if conf && conf.user_id != @thisuser.id\n    if conf.nil?\n      flash[:error] = 'Illegal request.'\n      redirect_to customers_path\n      return\n    end\n\n    unless params[:button] == 'true'\n      flash[:success] = 'Action cancelled.'\n      redirect_to conf.referer\n      conf.delete\n      return\n    end\n\n    @customer = load_customer(conf.target_id)\n    @redirect_target = conf.referer\n    conf.delete\n    redirect_to customers_path if @customer.nil?\n\n    if conf.params[:able].nil?\n      @p = conf.params[:params]\n      update_object\n    else\n      able(conf.params[:able])\n    end\n  end\n\n  def features\n    respond_to do |format|\n      format.json do\n        begin\n          @customer = Customer.find(params[:id])\n        rescue ActiveRecord::RecordNotFound\n          render json: nil\n        end\n        render json: @customer.features\n      end\n    end\n  end\n\n  def cpcodes\n    respond_to do |format|\n      format.json do\n        begin\n          @customer = Customer.find(params[:id])\n        rescue ActiveRecord::RecordNotFound\n          render json: nil\n        end\n        render json: @customer.cpcode_ids.sort\n      end\n    end\n  end\n\n  ##############################################################\n  private\n  ##############################################################\n\n  def load_customer(id = nil)\n    @customer = if id\n      Customer.find id\n    else\n      Customer.find params[:id]\n    end\n  rescue ActiveRecord::RecordNotFound\n    flash[:error] = \"Couldn't find the requested customer. Please use the interface to select a customer.\"\n    @customer = nil\n    redirect_to request.referer ? request.referer : customers_path\n    return\n  end\n\n  def customer_params\n    @p = Hash.new\n    [:name, :short_name, :description, :enabled, :feature_ids].each do |key|\n      if params[:customer][key]\n        @p[key] = params[:customer][key]\n      end\n    end\n\n    if params[:admin]\n      @q = Hash.new\n      [:name, :displayname, :email].each do |key|\n        if params[:admin][key]\n          @q[key] = params[:admin][key]\n        end\n      end\n      @q[:enabled] = true\n    end\n\n    # All customers have Feature ID 1\n    if @p[:feature_ids].nil?\n      @p[:feature_ids] = Array.new\n    end\n    @p[:feature_ids] << '1'\n  end\n\n  def is_admin_customer(cid)\n    (cid == 1 || # Administrator\n      cid == 101 || # Customer Care\n      cid == 1001) # Akamai Federal Engineering\n  end\n\n  def able(val)\n    ActiveRecord::Base.transaction do\n      log_side_effects(@customer.able_with_side_effects(val, true))\n      respond_to do |fmt|\n        fmt.html do\n          flash[:success] = \"#{val ? 'Enabled' : 'Disabled'} customer '#{@customer.name}'.\"\n          redirect_to @redirect_target\n        end\n        fmt.json do\n          render json: @customer, status: :ok, location: @customer\n        end\n      end\n    end\n  end\n\n  def update_object\n    h_log = {\n      'action' => Applog::Action::Customer_Update,\n      'target' => @customer.id,\n      'success' => false\n    }\n\n    ActiveRecord::Base.transaction do\n      respond_to do |format|\n        feat_diff = @customer.feature_ids - @p[:feature_ids].map(&:to_i)\n        was_enabled = @customer.enabled\n        if @customer.update_attributes @p\n          h_log['success'] = true\n          log_info h_log\n\n          effects = @customer.remove_features_side_effects(feat_diff, true)\n          en = Customer::check_enable(was_enabled, @customer.enabled)\n          effects += @customer.able_with_side_effects(en, true)\n\n          effects = effects.reject do |eff|\n            eff[:action] == 'enable_customer' ||\n            eff[:action] == 'disable_customer'\n          end\n          log_side_effects effects.uniq\n\n          format.html do\n            flash[:success] = \"Updated customer '#{@customer.name}'.\"\n            redirect_to @redirect_target\n          end\n          format.json { render json: @customer, status: :ok, location: @customer }\n        else\n          h_log['data'] = { 'message' => 'Object save failed' }\n          log_error h_log\n\n          format.html { render action: 'edit' }\n          format.json { render json: @customer.errors, status: :unprocessable_entity }\n        end\n      end\n    end\n  end\nend\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":149,"column":11},"end":{"row":149,"column":11}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/app/controllers/customers_controller.rb","digestWhenLastPersisted":"aa3a7ff4d90722a55a3294b79b9b77cda344d3d2","preferredLineEnding":null,"nextMarkerId":22,"deserializer":"TextBuffer","version":5},{"id":"a9df68b3775338f120373498a88a25fa","text":"require 'test_helper'\nrequire_relative './expectations'\n\nclass CustomersControllerTest < ActionController::TestCase\n  include CustomerExpectations\n  include ConfirmationHelper\n\n  VALID_CUSTOMER_ID = 1000\n  ADMIN_CUSTOMER_ID = 101\n  INVALID_CUSTOMER_ID = 99999\n\n  def setup\n    @user = User.find_by(name: 'ccare')\n    login(@user)\n  end\n\n  def valid_customer_params(id = nil, cancel: false)\n    {\n      id: id,\n      customer: {\n        name: 'Name',\n        short_name: 'SN',\n        description: 'Description',\n        enabled: true,\n        feature_ids: []\n      },\n      admin: {\n        name: 'admin_name',\n        displayname: 'Admin Name',\n        email: 'admin@example.gcds.com'\n      },\n      conf_id: 1,\n      button: cancel ? 'false' : 'true'\n    }\n  end\n\n  def with_customer(enabled = true)\n    customer = create(:customer, enabled: enabled)\n    yield(customer.id)\n  end\n\n  def with_disabled_customer\n    with_customer(false) { |customer_id| yield(customer_id) }\n  end\nend\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":4,"column":0},"end":{"row":4,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/test/controllers/customers_controller/common.rb","digestWhenLastPersisted":"4bd87c2949090a3acf2e2b97aaea6150b58f2b40","preferredLineEnding":null,"nextMarkerId":12,"deserializer":"TextBuffer","version":5},{"id":"0a0e930da135a1da25ebdef40a6928cb","text":"Rails.application.config.assets.version = Akamai.portal_version\n\n# Force rails to include every .js and .css file under /app/assets in its\n# precompile list. This became necessary in Rails 4.1, which (even in\n# development) checks to see if it thinks you're using the assets pipeline\n# \"correctly\" in production. Since we have javascript_include_tag and\n# stylesheet_link_tag calls all over the place, we are certainly not using the\n# pipeline \"correctly\". -BCC 5/7/14\nRails.application.config.assets.precompile << proc do |path|\n  if path =~ /\\.(css|js)\\z/\n    full_path = Rails.application.assets.resolve(path).to_path\n    app_assets_path = Rails.root.join('app', 'assets').to_path\n    if full_path.starts_with? app_assets_path\n      Rails.logger.debug 'including asset: ' + path\n      true\n    else\n      Rails.logger.debug 'excluding asset: ' + path\n      false\n    end\n  else\n    false\n  end\nend\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":5},"end":{"row":0,"column":5}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/config/initializers/assets.rb","digestWhenLastPersisted":"0bde2bf77c3aa58961f866ef85b3e07f4f451f2b","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"1e7e1b499efaec49019974aa7284e114","text":"Rails.application.configure do\n  # Settings specified here will take precedence over those in config/application.rb.\n\n  config.log_level = portal_config['logging']['log_level']\n\n  # In the development environment your application's code is reloaded on\n  # every request. This slows down response time but is perfect for development\n  # since you don't have to restart the web server when you make code changes.\n  config.cache_classes = false\n\n  # Do not eager load code on boot.\n  config.eager_load = false\n\n  # Show full error reports and disable caching.\n  config.consider_all_requests_local       = true\n  config.action_controller.perform_caching = false\n\n  # Don't care if the mailer can't send.\n  config.action_mailer.raise_delivery_errors = false\n\n  # Print deprecation notices to the Rails logger.\n  config.active_support.deprecation = :log\n\n  ###FIXME:RAILS3\n  ## Only use best-standards-support built into browsers.\n  #config.action_dispatch.best_standards_support = :builtin\n\n  # Raise an error on page load if there are pending migrations.\n  config.active_record.migration_error = :page_load\n\n  ###FIXME:RAILS3 ???\n  # Raise exception on mass assignment protection for Active Record models.\n  config.active_record.mass_assignment_sanitizer = :strict\n\n  # Assets are not compressed unless compressors are explicitly specified\n  # (see production.rb)\n\n  # Debug mode disables concatenation and preprocessing of assets.\n  # This option may cause significant delays in view rendering with a large\n  # number of complex assets.\n  config.assets.debug = true\n\n  config.serve_static_files = true\n\n  # Asset digests allow you to set far-future HTTP expiration dates on all assets,\n  # yet still be able to expire them through the digest params.\n  config.assets.digest = true\n\n  # Adds additional error checking when serving assets at runtime.\n  # Checks for improperly declared sprockets dependencies.\n  # Raises helpful error messages.\n  config.assets.raise_runtime_errors = true\n\n  # added at the recommendation of the rails guide on local asset\n  # precompilation since we're compiling assets at akamake time\n  # instead of install time:\n  # (http://guides.rubyonrails.org/asset_pipeline.html#local-precompilation)\n  config.assets.prefix = '/dev-assets'\n\n  # Raises error for missing translations\n  # config.action_view.raise_on_missing_translations = true\n\n  # Allow remote hosts to use better_errors, if $TRUSTED_IP is set\n  BetterErrors::Middleware.allow_ip! ENV['TRUSTED_IP'] if ENV['TRUSTED_IP']\n  BetterErrors::Middleware.allow_ip! '172.0.0.0/8'\n  BetterErrors::Middleware.allow_ip! '192.168.0.0/16'\n\n  config.action_mailer.raise_delivery_errors = false\n  config.action_mailer.smtp_settings = {\n    address: portal_config['mail']['relay']\n  }\nend\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":58,"column":0},"end":{"row":58,"column":0}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/config/environments/development.rb","digestWhenLastPersisted":"3a931bf18b8707242d65df98dd190b52f373fde1","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"734eb57e786c1627c322832a67d4ee25","text":"#! /bin/sh\n# -*- Makefile -*-\nmagic_startup_code=a; cd `echo \"$0\" | sed 's@^[^/]*$@.@; s@/[^/]*$@@;'` && exec make -f `basename $0` ${1+\"$@\"}\n# $Id: //projects/gcdn/components/mcdn-portal-3.8/akamai/mcdn-portal/akamake#2 $\n#\n# This file contains component specific dependency rules.\nall: build  # build is defined in Akamake/akamaster.mak\n### DO NOT EDIT ABOVE #################################################\n\n# C: name of this component's directory (and the directory cannot be a\n#    symlink)\nC := mcdn-portal\n\n# PROG: for those older components that used the PACKAGE variable in\n#       configure.in.  Edit if different than directory name\nPROG := $C\n\n### DO NOT EDIT BELOW #################################################\nBASE_PATH := $(firstword $(BASE_PATH) $(subst /$C-xx,,$(CURDIR)-xx))\nP := $(BASE_PATH)/$C\n$P/PROG := $P/$(PROG)\nREF_PATH := $(firstword $(REF_PATH) NoValidPath)\nAKAMAKE := $(firstword $(AKAMAKE) $(wildcard $(BASE_PATH)/Akamake) $(REF_PATH)/Akamake)\nifndef ATTR_ONLY\n-include $(AKAMAKE)/akamake-env.mak\nendif\n### DO NOT EDIT ABOVE #################################################\n\n\n$P/BUILDRUBY   = $(call get-component-path,buildruby)\n-include $($P/BUILDRUBY)/akamake-pre.mak\n$P/RUBYCOMP    = $($($P/BUILDRUBY)/ruby-comp)\n$P/RUBY        = $(call get-component-path,$($P/RUBYCOMP))\n$P/RUBYLIBS    = \\\n\t-I$(call $($P/RUBY)/RUBY_LIB) \\\n\t-I$(call $($P/RUBY)/RUBY_ARCHLIB,i686) \\\n\t-I$($P/RUBY)/lib\n$P/RUBY_BIN    = $($($P/BUILDRUBY)/ruby-exe) $($P/RUBYLIBS)\n$P/RUBY_LIB_VERSION = $($($P/BUILDRUBY)/ruby-lib-version)\n\n\n$P/RUBY_GEM_PATH = $($P/RUBY)/export/lib/ruby/gems/$($P/RUBY_LIB_VERSION)\n$P/BUNDLE_BIN = $($P/RUBY)/export/bin/bundle\n\n\n$P/ENV = CPATH=$(COMMON)/include GEM_HOME=$($P/GEM_HOME) GEM_PATH=$($P/GEM_HOME):$($P/RUBY_GEM_PATH) PATH=$(PATH):$(call get-component-path,nodejs) CPPFLAGS=\"-I$(call get-component-path,openssl)/include\" LDFLAGS=\"-L$(call get-component-path,openssl)\"\n\n\nifndef AKAMAKE-COMMON-BUILD\n\n# libcurl only exists for -m64 in the ALSI7 VBE; presume we need this as a\n# build dep going forward, but maybe not once we start doing lib64 builds?\n# --bcc, 6 aug 2015\n$P/DEP-COMPS :=  \\\n\tbuildruby \\\n\tcurl \\\n\tpostgresql9.1 \\\n\tnodejs \\\n\tmcdn-lds-proto \\\n\tportal-ui-css \\\n\tportal-common-ui-library \\\n\topenssl/enable/tlsv1 \\\n\topenssl/enable/bf \\\n\tapache-tomcat7 \\\n\tjava7 \\\n\tapache-maven-lunabuild\n\n$(call assert_min_version,openssl,6.101.5.15)\n\nendif\n\n\n\n$P/LIBXML := $(call get-component-path,libxml)\n$P/LIBXMLVERSION := $(shell cat $($P/LIBXML)/THIRD-PARTY-VERSION)\n$P/LIBXMLPACKAGE := libxml2-$($P/LIBXMLVERSION)\n\n$P/LIBXSLT := $(call get-component-path,libxslt)\n$P/LIBXSLTVERSION := $(shell cat $($P/LIBXSLT)/THIRD-PARTY-VERSION)\n$P/LIBXSLTPACKAGE := libxslt-$($P/LIBXSLTVERSION)\n\n$P/PG = $(call get-component-path,postgresql9.1)/installed/usr/local/akamai/third-party/postgresql9.1\n\n$P/PG_DEPS := \\\n\t$(COMMON)/include/postgresql/libpq-fe.h \\\n\t$(COMMON)/include/postgresql/postgres_ext.h \\\n\t$(COMMON)/lib/libpq$(EXT_A) \\\n\t$(COMMON)/bin/pg_config\n\n\n# $P/TARGETS: list of targets in this component to be built.\n#             Typically you will specify everything after the $P/\n#             prefix, and then leave the addition of the prefix to\n#             the second line.\n\nifdef AKAMAKE-COMMON-BUILD\n$P/TARGETS :=\nelse\n$P/TARGETS := import-portal-ui-components bundleinstall staticinfo precompile-assets ldsmdtcomms portal_tarball analytics-app\n$P/IMP-TREES = \\\n\tmcdn-lds-proto:proto=>extlib\nendif\n$P/TARGETS := $(addprefix $P/,$($P/TARGETS))\n\n$P/GEM_HOME := $P/vendor/bundle\n$P/LIB_ASSETS := $P/lib/assets\n\n$P/import-portal-ui-components:\n\tmkdir -p $($P/LIB_ASSETS)\n\tfor x in css images sass; do cp -Rfv $P/../portal-ui-css/$$x $($P/LIB_ASSETS); done\n\tcp -Rfv $P/../portal-common-ui-library/lib $($P/LIB_ASSETS)\n\ttouch $@\n\n\n# $($P/ENV) $(P/RUBY_BIN) $($P/BUNDLE_BIN) config --local build.pg '--with-pg-include=$(COMMON)/include/postgresql --with-pg-lib=$(COMMON)/lib'\n# 'bundle config' doesn't know how to handle spaces in config values,\n# so trying to set --with-pg-include and --with-pg-lib doesn't work. So\n# we hack it by writing directly into the config file.\n\n$P/bundleinstall: $($P/DEP-LIBS) $($P/PG_DEPS) $P/Gemfile $P/Gemfile.lock\n\trm -rf $P/.bundle\n\tmkdir -p $P/.bundle\n\ttouch $P/.bundle/config\n\techo BUNDLE_BUILD__PG: \\\"--with-pg-include=$(COMMON)/include/postgresql --with-pg-lib=$(COMMON)/lib/pg9.1\\\" >> $P/.bundle/config\n\techo BUNDLE_BUILD__LIBXML-RUBY: \\\"--with-xml2-config=$($P/LIBXML)/$($P/LIBXMLPACKAGE)/xml2-config\\\" >> $P/.bundle/config\n\t@# This works, but is not necessary, in ALSI6\n\techo BUNDLE_BUILD__NOKOGIRI: \\\"--use-system-libraries --with-xml2-config=$($P/LIBXML)/$($P/LIBXMLPACKAGE)/xml2-config --with-xslt-config=$($P/LIBXSLT)/$($P/LIBXSLTPACKAGE)/xslt-config\\\" >> $P/.bundle/config\n\trm -rf $P/bin\n\tmkdir -p $P/bin\n\tmkdir -p $($P/GEM_HOME)\n\t$($P/ENV) $($P/BUNDLE_BIN) install --gemfile Gemfile --path $($P/GEM_HOME) --local --deployment --binstubs\n\t@# This level of indirection makes the baby jesus cry. But without it, we need to confirm an overwrite.\n\tmv bin/rake bin/rakestub\n\trm -f bin/rails bin/bundle\n\t$($P/ENV) $($P/RUBY_BIN) bin/rakestub rails:update:bin\n\trm -f bin/rakestub\n\ttouch $@\n\n$P/staticinfo: $P/bundleinstall\n\t@echo Writing staticinfo tables...\n\tmkdir -p $P/etc/mcdnportal/query\n\t$($P/ENV) $($P/RUBY_BIN) -rbundler/setup -r$P/config/environment.rb $P/scripts/build_staticinfo_tables.rb\n\ttouch $@\n\n\n# Instead of touching $@, I'm going to let this build every time.  the\n# rake task is already smart enough not to rebuild assets that haven't\n# changed, so that saves us from having to have a long list of\n# dependencies here (which would duplicate them from config anyway).\n#\n# Since we're using Rails.config.assets.prefix = \"/dev-assets\", any direct\n# to /assets will break in development mode.  They will also prevent proper\n# caching in production mode (changes to those assets will require a purge).\n# So let's fail the build if there are any references to /assets in app/assets/*\n$P/precompile-assets: $P/bundleinstall $P/import-portal-ui-components\n\tif [[ -n \"$$(egrep -R '[\\\"( ]/assets' $P/app/*)\" ]] ; then echo ; echo; echo References to /assets found: ; echo ; egrep -R '[\\\"( ]/assets' $P/app/*; echo; cat $P/dev-assets.txt; echo; echo; /bin/false; fi\n\t$($P/ENV) RAILS_ENV=production $($P/RUBY_BIN) $P/bin/rake assets:precompile\n\n\n# this component should depend on $P/akamake.imp-trees-all.ts, but it builds every time in that case\n# this is a bit of a hack to depend on a single imp-tree, but it works\n$P/ldsmdtcomms: $P/akamake.imp-tree-comp-mcdn-lds-proto.tree-proto.ts $P/bundleinstall\n\tcd $P && $($P/ENV) $($P/RUBY_BIN) $P/bin/rprotoc $P/extlib/src/ldsmdtcomms.proto\n\tsed -i -e 's/^### <proto file: .*ldsmdtcomms.proto>//' $P/ldsmdtcomms.pb.rb\n\tif ! diff $P/ldsmdtcomms.pb.rb $P/extlib/ldsmdtcomms.pb.rb ; then echo Generated ldsmdtcomms.pb.rb does not match the file in git.  Please run akamake ldsmdtcomms, then copy ldsmdtcomms.pb.rb to extlib and check it in. ; false ; fi\n\tmv -v $P/ldsmdtcomms.pb.rb $P/extlib\n\ttouch $@\n\n# Build Security Monitor web application (analytics.war)\n$P/JAVA-HOME = $/../java7/unpacked/linux-jdk/x64/jdk1.7.0/\n$P/MAVEN-RUN = $(call $(call get-component-path,apache-maven-lunabuild)/MAVEN-RUN,$($P/JAVA-HOME), $(1))\n\n# This target skips tests, because we don't necessarily want to run them\n# in BART.  There's a separate \"test\" target which will run the tests.\n$P/analytics-app: $P/akamake\n\tmkdir -p $P/linux-2.x/webapps/WEB-INF\n\t(cd $P && $(call $P/MAVEN-RUN,clean package -DskipTests -U))\n\n# this should be done last.\n$P/portal_tarball: $P/bundleinstall $P/ldsmdtcomms $P/precompile-assets $P/staticinfo $P/analytics-app\n\trm -rf $P/deploy\n\t$($P/ENV) $($P/RUBY_BIN) -rbundler/setup $P/hostsetup/build_portal_tarball.rb $P\n\n# clean-up rules; usually, this is enough, but not always.\n$P/clean:\n\t$(CLEAN-COMMON)\n\t$(CLEAN-LOCAL)\n\trm -rf $($P/GEM_HOME)\n\trm -rf $($P/LIB_ASSETS)\n\trm -rf $P/public/assets\n\trm -f $P/bundleinstall $P/staticinfo\n\trm -rf ~/.bundle/ $P/.bundle/\n\trm -rf $P/tmp\n\trm -rf $P/deploy\n\n$P/distclean:\n\t$(DISTCLEAN-COMMON)\n\t$(DISTCLEAN-LOCAL)\n\n$P/third-party:\n\n\n$P/component-configure:\n\nifdef AKAMAKE-COMMON-BUILD\n$P/DEP-COMPS :=\n$P/IMP-TREES =\nendif\n\n\n\n### DO NOT EDIT BELOW #################################################\nifndef ATTR_ONLY\ninclude $(AKAMAKE)/akamaster.mak\nelse\ndep_comp: $P/DEP-COMPS\n$P/DEP-COMPS:\n\t@echo Akamake $($@)\nendif\nP := pbad\nC := cbad\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":155,"column":3},"end":{"row":155,"column":3}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[{"type":"group-end","snapshot":{"2":{"1":{"range":[[155,1],[155,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[155,1],[155,3]],"newRange":[[155,1],[155,1]],"oldText":"if","newText":""}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[155,1],[155,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}}]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/akamake","digestWhenLastPersisted":"c79d52453c3254c30eff00f537de3bb80480c475","preferredLineEnding":null,"nextMarkerId":11,"deserializer":"TextBuffer","version":5},{"id":"176eb67b08e3adbe40328610ecf80221","text":"Because we're using Rails.config.assets.prefix = '/dev-assets' in\ndevelopment, any hardcoded references to /assets will break in\ndevelopment.  We should be using the helpers to generate URLs.\n\nFor CSS files: \n\n- Change the file extension from .css to .css.scss if needed.\n- Change image references like this: \n  \n  background-image: image-url(\"logo.png\")\n\n- Change other resource references like this: \n\n  background-image: asset-url(\"logo.png\", image)\n\n- Embed image data like this:\n\n  background-image: asset-data-url(\"logo.png\")\n\nFor javascript files:\n\n- Change the extension from .js to .js.erb as needed\n- Change hardcoded javascript urls to calls like this:\n\n  \"<%= javascript_path \"my_javascript_file.js\" %>\"\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":2,"column":9},"end":{"row":2,"column":9}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/alholt/code/mcdn-portal/dev-assets.txt","digestWhenLastPersisted":"ebcfdb280e3c6d8427b0c3bef280e3e4142d1df0","preferredLineEnding":null,"nextMarkerId":10,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"PaneAxis","children":[{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":8,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/test/controllers/customers_controller/update_test.rb","bufferId":"b28def0a2c3fa3b2694ad64b91c9304d","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":12,"softTabs":true,"firstVisibleScreenRow":3,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/test/controllers/cpcodes_controller/update_test.rb","bufferId":"ab07460427a3b83204ce4f95dd099612","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":35,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":36,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/config/initializers/assets.rb","bufferId":"0a0e930da135a1da25ebdef40a6928cb","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":25,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":26,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/test/controllers/customers_controller/common.rb","bufferId":"a9df68b3775338f120373498a88a25fa","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/alholt/code/mcdn-portal/config/initializers/assets.rb","focused":false,"flexScale":1},{"deserializer":"Pane","id":16,"items":[{"deserializer":"TextEditor","id":17,"softTabs":true,"firstVisibleScreenRow":128,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":18,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/app/controllers/customers_controller.rb","bufferId":"4dff72367922114b4b93ee2400f3f40b","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":39,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":40,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/config/environments/development.rb","bufferId":"1e7e1b499efaec49019974aa7284e114","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":43,"softTabs":true,"firstVisibleScreenRow":152,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":44,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/akamake","bufferId":"734eb57e786c1627c322832a67d4ee25","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":51,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":52,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/alholt/code/mcdn-portal/dev-assets.txt","bufferId":"176eb67b08e3adbe40328610ecf80221","tabLength":2,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/alholt/code/mcdn-portal/dev-assets.txt","focused":true,"flexScale":1}],"orientation":"horizontal","flexScale":1},"activePaneId":16},"packagesWithActiveGrammars":["language-ruby","language-shellscript","language-text","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/alholt/code/mcdn-portal/test/controllers/arl_configs_controller/enable_disable_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/arl_configs_controller/create_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/arl_configs_controller/edit_test.rb","/Users/alholt/code/mcdn-portal/test/functional/purge_test.rb","/Users/alholt/code/mcdn-portal/test/end_to_end/test_config.rb","/Users/alholt/code/mcdn-portal/config/portal.prod.config.defaults.json","/Users/alholt/code/mcdn-portal/Guardfile","/Users/alholt/code/mcdn-portal/app/controllers/applogs_controller.rb","/Users/alholt/code/mcdn-portal/test/functional/purge.rb","/Users/alholt/code/mcdn-portal/lib/tasks/qa.rake","/Users/alholt/.ssh/config","/Users/alholt/code/mcdn-portal/test/models/perforcejob/purgeapi_users_test.rb","/Users/alholt/code/mcdn-portal/app/lib/purgeapi_users_generator.rb","/Users/alholt/.oh-my-zsh/custom/aliases.zsh","/Users/alholt/code/mcdn-portal/test/javascripts/casper-test.js.coffee","/Users/alholt/code/mcdn-portal/test/javascripts/login/login.js","/Users/alholt/code/mcdn-portal/spec/support/database_cleaner.rb","/Users/alholt/code/mcdn-portal/app/controllers/sessions_controller.rb","/Users/alholt/code/mcdn-portal/test/controllers/arl_hosts_controller/create_test.rb","/Users/alholt/code/ruby_auto/lib/mcdnportal/controllers/navigation.rb","/Users/alholt/code/mcdn-portal/app/lib/portal.rb","/Users/alholt/code/mcdn-portal/app/lib/akamai.rb","/Users/alholt/code/mcdn-portal/Gemfile","/Users/alholt/code/ruby_auto/scripts/mcdnportal/login/cookie_test.rb","/Users/alholt/code/ruby_auto/lib/mcdnportal/abstraction/navigation.json","/Users/alholt/code/ruby_auto/lib/mcdnportal/abstraction/login.json","/Users/alholt/code/mcdn-portal/test/controllers/purge_controller/create_test.rb","/Users/alholt/code/mcdn-portal/app/controllers/purges_controller/create.rb","/Users/alholt/notes/portal/tests_to_replace.md","/Users/alholt/code/mcdn-portal/test/integration/login/cookies_test.rb","/Users/alholt/code/ruby_auto/lib/mcdnportal/controllers/qa.rb","/Users/alholt/code/ruby_auto/scripts/mcdnportal/login/ssl_test.rb","/Users/alholt/code/ruby_auto/scripts/mcdnportal/purge/email_test.rb","/Users/alholt/code/mcdn-portal/PurgesController","/Users/alholt/code/mcdn-portal/test/integration/ui/global_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/ldsjobs_controller/create_test.rb","atom://release-notes","/Users/alholt/code/mcdn-portal/test/integration/purge/email_test.rb","/Users/alholt/code/mcdn-portal/test/integration/purge/index_test.rb","/Users/alholt/code/mcdn-portal/7","/Users/alholt/code/mcdn-portal/config/routes.rb","/Users/alholt/code/mcdn-portal/app/views/purges/ajax.html.erb","/Users/alholt/code/mcdn-portal/test/factories/cpcode.rb","/Users/alholt/code/mcdn-portal/test/factories/user.rb","/Users/alholt/code/mcdn-portal/test/assertions/flash_message.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/index_test.rb","/Users/alholt/code/mcdn-portal/app/controllers/application_controller.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/purgeapi2_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/misc_test.rb","/Users/alholt/code/mcdn-portal/test/integration/purge/status_test.rb","/Users/alholt/code/mcdn-portal/test/integration/purge/purge_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/index_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/ajax_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/new_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/status_test.rb","/Users/alholt/code/mcdn-portal/test/factories/arl_host.rb","/Users/alholt/code/mcdn-portal/app/models/customer.rb","/Users/alholt/code/mcdn-portal/test/factories/customer.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/create_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/purgeapi2_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/show_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/show_test.rb","/Users/alholt/code/mcdn-portal/mcdnportal-448-patch.diff","/Users/alholt/code/mcdn-portal/app/views/shared/_chart_box.html.erb","/Users/alholt/code/mcdn-portal/app/controllers/purges_controller.rb","/Users/alholt/code/mcdn-portal/app/controllers/purges_controller.rb","/Users/alholt/code/mcdn-portal/app/models/user.rb","/Users/alholt/code/mcdn-portal/test/factories/arl_config.rb","/Users/alholt/code/mcdn-portal/app/models/arl_config.rb","/Users/alholt/code/mcdn-portal/app/lib/restccu_client.rb","/Users/alholt/code/mcdn-portal/app/lib/ccuapi_requests.rb","/Users/alholt/code/mcdn-portal/app/views/purges/show.html.erb","/Users/alholt/code/mcdn-portal/test/factories/purge.rb","/Users/alholt/.atom/keymap.cson","/Users/alholt/.atom/init.coffee","/Users/alholt/.atom/styles.less","atom://config/updates","/Users/alholt/.atom/snippets.cson","/Users/alholt/code/mcdn-portal/app/assets/javascripts/auto-refresh.js","/Users/alholt/code/mcdn-portal/test/factories/alertdef.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/able_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/able_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/create_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/edit_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/internal_access_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/permissions_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/show_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_controller/update_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_history_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_history_controller/error_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/alerts_history_controller/permissions_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/arl_configs_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/arl_hosts_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/eccu_requests_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/ldsjobs_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/password_resets_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/password_resets_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/passwords_controller/common_permissions.rb","/Users/alholt/code/mcdn-portal/test/controllers/passwords_controller/common_validation.rb","/Users/alholt/code/mcdn-portal/test/controllers/passwords_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/passwords_controller/validation_update_purge_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/passwords_controller/validation_update_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/purges_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/reporting_controller/streaming_stats_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/security_monitor_controller.rb","/Users/alholt/code/mcdn-portal/test/controllers/services_controller_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/sessions_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/sessions_controller/impersonations_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/storage_controller/common.rb","/Users/alholt/code/mcdn-portal/test/controllers/users_controller/inactivereset_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/users_controller/passchangereset_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/users_controller/passfailreset_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/users_controller/pkideprovision_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/users_controller/pkiprovision_test.rb","/Users/alholt/code/mcdn-portal/test/controllers/waf_display_controller_test.rb","atom://find-and-replace/project-results","/Users/alholt/code/mcdn-portal/test/fixtures/alertdefs.yml","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/jquery-ui-theme/jquery-ui.theme.css.erb","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/jquery-ui-theme/jquery-ui.theme.css.scss","/Users/alholt/vbe_history_pg_gem.txt","/Users/alholt/code/mcdn-portal/test/test_helper.rb","/Users/alholt/code/mcdn-portal/app/views/advisories/edit.html.erb","/Users/alholt/code/mcdn-portal/app/views/reporting/_chart_options.html.erb","/Users/alholt/code/mcdn-portal/app/views/layouts/smartadmin.html.erb","atom://config","/Users/alholt/code/mcdn-portal/app/views/ucds/issue_tracking_tickets/index.html.erb","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/application.css","/Users/alholt/code/mcdn-portal/.gitignore","/Users/alholt/code/mcdn-portal/app/assets/javascripts/application.js","/Users/alholt/code/mcdn-portal/app/assets/javascripts/login.js","/Users/alholt/code/mcdn-portal/app/views/shared/_chart_settings.html.erb","/Users/alholt/code/mcdn-portal/app/views/layouts/login.html.erb","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/login.css.scss","/Users/alholt/code/mcdn-portal/test/unit/p4_options_test.rb","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/_content.scss","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/_classbanner.scss","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/_base.scss","/Users/alholt/code/mcdn-portal/app/assets/stylesheets/_common.scss"]},"packageStates":{"script":{"scriptViewState":"","scriptOptionsViewState":""},"fuzzy-finder":{"/Users/alholt/code/mcdn-portal/test/controllers/customers_controller/update_test.rb":1458574896388,"/Users/alholt/code/mcdn-portal/test/controllers/cpcodes_controller/update_test.rb":1459178603682,"/Users/alholt/code/mcdn-portal/config/initializers/assets.rb":1459178653546,"/Users/alholt/code/mcdn-portal/test/controllers/customers_controller/common.rb":1458573689933,"/Users/alholt/code/mcdn-portal/app/controllers/customers_controller.rb":1459178603682,"/Users/alholt/code/mcdn-portal/config/environments/development.rb":1459178664491,"/Users/alholt/code/mcdn-portal/akamake":1459178684143,"/Users/alholt/code/mcdn-portal/dev-assets.txt":1459178774911},"keybinding-resolver":{},"metrics":{"sessionLength":262899},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/alholt/code/mcdn-portal":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"alerts":{"isExpanded":false,"entries":{}},"app":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"config":{"isExpanded":false,"entries":{}},"coverage":{"isExpanded":false,"entries":{}},"db":{"isExpanded":false,"entries":{}},"dev":{"isExpanded":false,"entries":{}},"extlib":{"isExpanded":false,"entries":{}},"frontend":{"isExpanded":false,"entries":{}},"hostsetup":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":false,"entries":{}},"log":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"scripts":{"isExpanded":false,"entries":{}},"test":{"isExpanded":false,"entries":{}},"tmp":{"isExpanded":false,"entries":{}},"unittests":{"isExpanded":false,"entries":{}},"vendor":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/alholt/code/mcdn-portal/test","hasFocus":false,"attached":false,"scrollLeft":0,"scrollTop":0,"width":228},"find-and-replace":{"findOptions":{"findPattern":"def setup","replacePattern":"","pathsPattern":"test/controllers/**/*.rb","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["def setup"],"replaceHistory":["def setupsuper"],"pathsHistory":["test/controllers/**/*.rb"]}},"fullScreen":true}