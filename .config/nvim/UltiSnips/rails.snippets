extends ruby

global !p
from snippet_helpers import *
endglobal

snippet rli "Rails.logger.info var" Ab
Rails.logger.info('ALLI> ${1:${VISUAL:var}}: ' + $1.inspect)
endsnippet

snippet ap "awesome_print var" b
ap "${1:${VISUAL:var}}: " + $1.inspect
endsnippet

snippet p! "puts var" Ab
puts "${1:${VISUAL:var}}: " + $1.inspect
endsnippet

snippet bb "byebug" Ab
byebug

endsnippet

snippet bp! "binding.pry" Ab
binding.pry
endsnippet

snippet bmark "Benchmark"
puts Benchmark.measure { ${1:${VISUAL:block}} }
endsnippet

snippet concern "New concern setup"
module ${1:ConcernName}
  extend ActiveSupport::Concern

  included do
    $0
  end

  def method_name

  end

  class_methods do
    def method_name

    end
  end
end

endsnippet

snippet habtm "has_and_belongs_to_many" A
has_and_belongs_to_many :${0:model}
endsnippet

snippet i18n "I18n translate" A
I18n.t('$0')
endsnippet

# Testing
snippet desc "describe [test]" Ab
describe '$1' do
  test '$2' do
    ${0:skip}
  end
end
endsnippet

snippet it "Rspec test"
it '$1' do
  ${0:skip}
end
endsnippet

snippet test "Rails::MiniTest test" Ab
test '$1' do
  ${0:skip}
end
endsnippet

snippet setup "setup block" Ab
setup do
  ${0}
end

endsnippet

snippet testcase
ActiveSupport:TestCase
endsnippet

snippet integration_test
ActionDispatch::IntegrationTest
endsnippet

snippet testfile "New file - ActiveSupport:TestCase"
require 'test_helper'

class `!p snip.rv = fileNameAsClass(snip)` < ${1:ActiveSupport::TestCase}
  describe '$2' do
    test '$3' do
      ${0:skip}
    end
  end
end

endsnippet
